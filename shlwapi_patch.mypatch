diff --git a/dlls/shlwapi/ordinal.c b/dlls/shlwapi/ordinal.c
index 8c9e324ae0..d4d39b1edb 100644
--- a/dlls/shlwapi/ordinal.c
+++ b/dlls/shlwapi/ordinal.c
@@ -4,6 +4,7 @@
  * Copyright 1997 Marcus Meissner
  *           1998 JÃ¼rgen Schmied
  *           2001-2003 Jon Griffiths
+ *           2020 Katayama Hirofumi MZ
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -189,31 +190,38 @@ HANDLE WINAPI SHAllocShared(LPCVOID lpvData, DWORD dwSize, DWORD dwProcId)
 }
 
 /*************************************************************************
- * @ [SHLWAPI.8]
+ * @ [SHLWAPI.510]
  *
- * Get a pointer to a block of shared memory from a shared memory handle.
+ * Get a pointer to a block of shared memory from a shared memory handle,
+ * with specified access rights.
  *
  * PARAMS
  * hShared  [I] Shared memory handle
  * dwProcId [I] ID of process owning hShared
+ * bWriteAccess [I] TRUE to get a writable block,
+ *                  FALSE to get a read-only block
  *
  * RETURNS
  * Success: A pointer to the shared memory
  * Failure: NULL
- *
  */
-PVOID WINAPI SHLockShared(HANDLE hShared, DWORD dwProcId)
+LPVOID WINAPI
+SHLockSharedEx(HANDLE hShared, DWORD dwProcId, BOOL bWriteAccess)
 {
   HANDLE hDup;
   LPVOID pMapped;
+  DWORD dwAccess;
 
-  TRACE("(%p %d)\n", hShared, dwProcId);
+  TRACE("(%p %d %d)\n", hShared, dwProcId, bWriteAccess);
 
   /* Get handle to shared memory for current process */
   hDup = SHMapHandle(hShared, dwProcId, GetCurrentProcessId(), FILE_MAP_ALL_ACCESS, 0);
+  if (hDup == NULL)
+    return NULL;
 
   /* Get View */
-  pMapped = MapViewOfFile(hDup, FILE_MAP_READ | FILE_MAP_WRITE, 0, 0, 0);
+  dwAccess = (FILE_MAP_READ | (bWriteAccess ? FILE_MAP_WRITE : 0));
+  pMapped = MapViewOfFile(hDup, dwAccess, 0, 0, 0);
   CloseHandle(hDup);
 
   if (pMapped)
@@ -221,6 +229,25 @@ PVOID WINAPI SHLockShared(HANDLE hShared, DWORD dwProcId)
   return NULL;
 }
 
+/*************************************************************************
+ * @ [SHLWAPI.8]
+ *
+ * Get a pointer to a block of shared memory from a shared memory handle.
+ *
+ * PARAMS
+ * hShared  [I] Shared memory handle
+ * dwProcId [I] ID of process owning hShared
+ *
+ * RETURNS
+ * Success: A pointer to the shared memory
+ * Failure: NULL
+ *
+ */
+PVOID WINAPI SHLockShared(HANDLE hShared, DWORD dwProcId)
+{
+  return SHLockSharedEx(hShared, dwProcId, TRUE);
+}
+
 /*************************************************************************
  * @ [SHLWAPI.9]
  *
diff --git a/dlls/shlwapi/shlwapi.spec b/dlls/shlwapi/shlwapi.spec
index f47f41aea4..23e4025b55 100644
--- a/dlls/shlwapi/shlwapi.spec
+++ b/dlls/shlwapi/shlwapi.spec
@@ -5,9 +5,9 @@
 5   stdcall -noname PathFindOnPathExA(str ptr long)
 6   stdcall -noname PathFindOnPathExW(wstr ptr long)
 7   stdcall -ordinal SHAllocShared(ptr long long)
-8   stdcall -ordinal SHLockShared(long long)
+8   stdcall -ordinal SHLockShared(ptr long)
 9   stdcall -ordinal SHUnlockShared(ptr)
-10  stdcall -ordinal SHFreeShared(long long)
+10  stdcall -ordinal SHFreeShared(ptr long)
 11  stdcall -noname SHMapHandle(long long long long long)
 12  stdcall -ordinal SHCreateMemStream(ptr long) shcore.SHCreateMemStream
 13  stdcall -noname RegisterDefaultAcceptHeaders(ptr ptr)
@@ -503,7 +503,7 @@
 507 stub -noname SHPropertyBag_ReadDWORD
 508 stub -noname SHPropertyBag_WriteDWORD
 509 stdcall -noname IUnknown_OnFocusChangeIS(ptr ptr long)
-510 stub -noname SHLockSharedEx
+510 stdcall -noname SHLockSharedEx(ptr long long)
 511 stub -noname PathFileExistsDefExtAndAttributesW
 512 stub -ordinal IStream_ReadPidl
 513 stub -ordinal IStream_WritePidl
